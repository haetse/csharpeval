//
//   Original grammar from the Antlr C# grammar project (https://antlrcsharp.codeplex.com) by anbrad
//   Modified for generating LINQ Expressions for the C# Expression Evaluator project (https://csharpeval.codeplex.com) by RupertAvery 2014-03-11
//
grammar ExprEval;

options {
    language = CSharp3;
	backtrack = true;
}

@lexer::namespace{ExpressionEvaluator.Parser}
@parser::namespace{ExpressionEvaluator.Parser}

@lexer::header       
{
using System;
using System.Linq.Expressions;
using System.Collections.Generic;
using Debug = System.Diagnostics.Debug;
}

@parser::header       
{
using System;
using System.Linq;
using System.Linq.Expressions;
using ExpressionEvaluator.Parser.Expressions;
using System.Reflection;
}

@lexer::members {
    // Preprocessor Data Structures - see lexer section below and PreProcessor.cs
    protected Dictionary<string,string> MacroDefines = new Dictionary<string,string>();    
    protected Stack<bool> Processing = new Stack<bool>();

    // Uggh, lexer rules don't return values, so use a stack to return values.
    protected Stack<bool> Returns = new Stack<bool>();
}

@members
{
	bool fakedot;

    protected bool is_class_modifier() 
    {
        return false;
    }
}
/*
 * Parser Rules
 */
 public compilation_unit:
    namespace_body[true];

public namespace_declaration:
    'namespace'   qualified_identifier   namespace_block   ';'? ;
public namespace_block:
    '{'   namespace_body[false]   '}' ;
namespace_body[bool bGlobal]:
    extern_alias_directives?   using_directives?   global_attributes?   namespace_member_declarations? ;
public extern_alias_directives:
    extern_alias_directive+ ;
public extern_alias_directive:
    'extern'   'alias'   identifier  ';' ;
public using_directives:
    using_directive+ ;
public using_directive:
    (using_alias_directive
    | using_namespace_directive) ;
public using_alias_directive:
    'using'      identifier   '='   namespace_or_type_name   ';' ;
public using_namespace_directive:
    'using'   namespace_name   ';' ;
public namespace_member_declarations:
    namespace_member_declaration+ ;
public namespace_member_declaration:
    namespace_declaration
    | attributes?   modifiers?   type_declaration ;
public type_declaration:
    ('partial') => 'partial'   (class_declaration
                                | struct_declaration
                                | interface_declaration)
    | class_declaration
    | struct_declaration
    | interface_declaration
    | enum_declaration
    | delegate_declaration ;
// Identifiers
public qualified_identifier:
    identifier ('.' identifier)* ;
namespace_name
    : namespace_or_type_name ;

public modifiers:
    modifier+ ;
public modifier: 
    'new' | 'public' | 'protected' | 'private' | 'internal' | 'unsafe' | 'abstract' | 'sealed' | 'static'
    | 'readonly' | 'volatile' | 'extern' | 'virtual' | 'override';
    
public class_member_declaration:
    attributes?
    m=modifiers?
    ( 'const'   type   constant_declarators   ';'
    | event_declaration        // 'event'
    | 'partial' ('void' method_declaration 
               | interface_declaration 
               | class_declaration 
               | struct_declaration)
    | interface_declaration    // 'interface'
    | 'void'   method_declaration
    | type ( (member_name   '(') => method_declaration
           | (member_name   '{') => property_declaration
           | (member_name   '.'   'this') => type_name '.' indexer_declaration
           | indexer_declaration    //this
           | field_declaration      // qid
           | operator_declaration
           )
//    common_modifiers// (method_modifiers | field_modifiers)
    
    | class_declaration        // 'class'
    | struct_declaration    // 'struct'       
    | enum_declaration        // 'enum'
    | delegate_declaration    // 'delegate'
    | conversion_operator_declaration
    | constructor_declaration    //    | static_constructor_declaration
    | destructor_declaration
    ) 
    ;

public primary_expression returns [Expression value]
@init{
	int savepoint = 0;
}: 
    ('this'    brackets) => 'this'   brackets   (primary_expression_part)*
    | ('base'   brackets) => 'base'   brackets   (primary_expression_part)*
    | { savepoint = input.Mark(); } 
		primary_expression_start 
		{ 
$value = $primary_expression_start.value; 
	
// Expression evaluator customization:		
if ($value == null) 
{
	if (Scope != null)
	{
		$value = Scope;

		// if initial identifier not found, assume Scope variable
		input.Rewind(savepoint);
		fakedot = true;

		$value = GetPrimaryExpressionPart(primary_expression_part(), input, $value, false);

		if($value == null) 
		{

			$value = Scope;
								
			var text = $primary_expression_start.text;

			var method1 = new TypeOrGeneric() { Identifier = "getVar" };
			var args1 = new List<Argument>() { new Argument() { Expression = Expression.Constant(text, typeof(string)) } };

			if(DynamicTypeLookup != null && DynamicTypeLookup.ContainsKey(text))
			{
				var type1 = DynamicTypeLookup[text];
				$value = Expression.Convert(ExpressionHelper.GetMethod($value, method1, args1, false), type1);
			} 
			else
			{		
				$value = ExpressionHelper.GetMethod($value, method1, args1, false);
			}

			if($value == null)
			{
				throw new ExpressionParseException(string.Format("Cannot resolve symbol \"{0}\"", input.LT(-1).Text), input);
			}

		}
	}
	else
	{
		throw new ExpressionParseException(string.Format("Cannot resolve symbol \"{0}\"", input.LT(-1).Text), input);
	}
}
		}  
		(primary_expression_part
		{ 
$value = GetPrimaryExpressionPart($primary_expression_part.value, input, $value);
fakedot = false;
		})* 
    | 'new' (   (object_creation_expression   ('.'|'->'|'[')) => 
                    object_creation_expression   (primary_expression_part)+         // new Foo(arg, arg).Member
                // try the simple one first, this has no argS and no expressions
                // symantically could be object creation
                | (delegate_creation_expression) => delegate_creation_expression// new FooDelegate (MyFunction)
                | oce=object_creation_expression { $value = $oce.value; }
                | anonymous_object_creation_expression)                            // new {int X, string Y} 
    | sizeof_expression                        // sizeof (struct)
    | checked_expression                    // checked (...
    | unchecked_expression                  // unchecked {...}
    | default_value_expression              // default
    | anonymous_method_expression            // delegate (int foo) {}
    ;

public primary_expression_start returns [Expression value]:
    predefined_type { var type = GetType($predefined_type.text); $value = Expression.Constant(type, typeof(Type)); }           
    | (identifier    generic_argument_list) => identifier   generic_argument_list
//    | identifier ('::'   identifier)?
    | identifier { $value = $identifier.value; }
    | 'this' 
    | 'base'
    | paren_expression  { $value = $paren_expression.value; }
    | typeof_expression  { $value = $typeof_expression.value; }          // typeof(Foo).Name
    | literal { $value = $literal.value; }
    ;

public primary_expression_part returns [PrimaryExpressionPart value]:
// fake an access identifer if Scope is set
    {fakedot}?=> type_or_generic { $value = new AccessIdentifier() { Value = $type_or_generic.value }; }
    | access_identifier { $value = $access_identifier.value; }
    | brackets_or_arguments { $value = $brackets_or_arguments.value; }
    | '++' { $value = new PostIncrement(); }
    | '--' { $value = new PostDecrement(); } ;

public access_identifier returns [AccessIdentifier value]:
    access_operator   type_or_generic { $value = new AccessIdentifier() { Value = $type_or_generic.value }; };

public access_operator:
    '.' |  '->' ;

public brackets_or_arguments returns [PrimaryExpressionPart value]:
    brackets { $value = $brackets.value; }
	| arguments { $value = $arguments.value; } ;

public brackets returns [Brackets value]:
    '['   (expression_list { $value = new Brackets() { Values = $expression_list.values }; })?   ']' ;    

public paren_expression returns [Expression value]:    
    '('   expression   ')' { $value = $expression.value; } ;

public arguments returns [Arguments value]
@init{
	$value = new Arguments() { Values = new List<Argument>() };
}: 
    '('   (argument_list {  $value.Values = $argument_list.values; })?   ')' ;

public argument_list returns [List<Argument> values]
@init
{
	$values = new List<Argument>();
}: 
	first=argument { $values.Add($first.value); } (',' suceeding=argument { $values.Add($suceeding.value); })*;

// 4.0
public argument returns [Argument value]:
    argument_name   argument_value { $value = $argument_value.value; $value.IsNamedArgument = true; $value.Name = $argument_name.value; } 
    | argument_value { $value = $argument_value.value; } ;
public argument_name returns [string value]:
    identifier   ':' { $value = $identifier.text; };
public argument_value returns [Argument value]: 
    expression  { $value = new Argument() { Expression = $expression.value, ParameterPassingMode = ParameterPassingModeEnum.ByVal }; } 
    | ref_variable_reference  { $value = new Argument() { Expression = $ref_variable_reference.value, ParameterPassingMode = ParameterPassingModeEnum.ByRef }; }
    | 'out'   variable_reference { $value = new Argument() { Expression = $variable_reference.value, ParameterPassingMode = ParameterPassingModeEnum.Out }; };
public ref_variable_reference returns [Expression value]:
    'ref' 
        (('('   type   ')') =>   '('   type   ')'   ( var0=ref_variable_reference { $value = $var0.value; } | var1=variable_reference { $value = $var1.value; })   // SomeFunc(ref (int) ref foo)
                                                                                                    // SomeFunc(ref (int) foo)
        | var2=variable_reference { $value = $var2.value; } );    // SomeFunc(ref foo)
// lvalue
public variable_reference returns [Expression value]:
    expression  { $value = $expression.value; } ;

public rank_specifiers: 
    rank_specifier+ ;        
public rank_specifier: 
    '['   dim_separators?   ']' ;
public dim_separators: 
    ','+ ;

public delegate_creation_expression: 
    // 'new'   
    type_name   '('   type_name   ')' ;
public anonymous_object_creation_expression: 
    // 'new'
    anonymous_object_initializer ;
public anonymous_object_initializer: 
    '{'   (member_declarator_list   ','?)?   '}';
public member_declarator_list: 
    member_declarator  (',' member_declarator)* ; 
public member_declarator: 
    qid   ('='   expression)? ;
public primary_or_array_creation_expression returns [Expression value]:
	(array_creation_expression) => array_creation_expression  { $value = $array_creation_expression.value; }|
     primary_expression { $value = $primary_expression.value; }
    | '(' primary_expression ')' { $value = $primary_expression.value; }
	;
// new Type[2] { }
public array_creation_expression returns [Expression value]:
    'new'   
        (type   ('['   expression_list   ']'   
                    ( rank_specifiers?   array_initializer?    // new int[4]
                    // | invocation_part*
                    | ( ((arguments   ('['|'.'|'->')) => arguments   invocation_part)// new object[2].GetEnumerator()
                      | invocation_part)*   arguments
                    )                            // new int[4]()
                | arr1=array_initializer { $value = $arr1.value; }         
                )
        | rank_specifier   // [,]
            ( arr2=array_initializer { $value = $arr2.value; }   // var a = new[] { 1, 10, 100, 1000 }; // int[]
            )
        ) ;
public array_initializer returns [NewArrayExpression value]:
    '{'   (variable_initializer_list { $value =  Expression.NewArrayInit(TypeConversion.GetBaseCommonType($variable_initializer_list.value), $variable_initializer_list.value); })?   ','?   '}' ;
public variable_initializer_list returns [List<Expression> value]
@init {
	$value = new List<Expression>();
}:
    first=variable_initializer { $value.Add(first); } (',' succeeding=variable_initializer { $value.Add(succeeding); } )*  ;
public variable_initializer returns [Expression value]:
    expression  { $value = $expression.value; }  | array_initializer  { $value = $array_initializer.value; } ;
public sizeof_expression:
    'sizeof'   '('   unmanaged_type   ')';
public checked_expression: 
    'checked'   '('   expression   ')' ;
public unchecked_expression: 
    'unchecked'   '('   expression   ')' ;
public default_value_expression: 
    'default'   '('   type   ')' ;
public anonymous_method_expression:
    'delegate'   explicit_anonymous_function_signature?   block;
public explicit_anonymous_function_signature:
    '('   explicit_anonymous_function_parameter_list?   ')' ;
public explicit_anonymous_function_parameter_list:
    explicit_anonymous_function_parameter   (','   explicit_anonymous_function_parameter)* ;    
public explicit_anonymous_function_parameter:
    anonymous_function_parameter_modifier?   type   identifier;
public anonymous_function_parameter_modifier:
    'ref' | 'out';


///////////////////////////////////////////////////////
public object_creation_expression returns [Expression value]: 
    // 'new'
    type   
        ( '('   argument_list?   ')'  first=object_or_collection_initializer?  
          | second=object_or_collection_initializer )
		  {
			$value = ExpressionHelper.New(GetType($type.text), $argument_list.values, $first.value ?? $second.value);
		  }
    ;
public object_or_collection_initializer returns [ObjectOrCollectionInitializer value] 
@init{
	$value = new ObjectOrCollectionInitializer();
}: 
    '{'  (object_initializer  { $value.ObjectInitializer = $object_initializer.value; }
        | collection_initializer)    '}';
public collection_initializer: 
    element_initializer_list  ;
public element_initializer_list: 
    element_initializer  (',' element_initializer)* ;
public element_initializer: 
    non_assignment_expression 
    | '{'   expression_list   '}' ;
// object-initializer eg's
//    Rectangle r = new Rectangle {
//        P1 = new Point { X = 0, Y = 1 },
//        P2 = new Point { X = 2, Y = 3 }
//    };
// TODO: comma should only follow a member_initializer_list
public object_initializer returns [List<MemberInitializer> value]: 
    member_initializer_list?  { $value = $member_initializer_list.value; }  ;
public member_initializer_list returns [List<MemberInitializer> value]
@init {
	$value = new List<MemberInitializer>();
}: 
    first=member_initializer { $value.Add($first.value); }  (',' succeeding=member_initializer { $value.Add($succeeding.value); } ) ;
public member_initializer returns [MemberInitializer value] : 
    identifier   '='   initializer_value { $value = new MemberInitializer() { Identifier = $identifier.text, Value = $initializer_value.value }; };
public initializer_value returns [Expression value]: 
    expression { $value = $expression.value; }
    | object_or_collection_initializer ;

///////////////////////////////////////////////////////

public typeof_expression returns [Expression value]: 
    'typeof'   '('   ((unbound_type_name) => unbound_type_name { $value = Expression.Constant(GetType($unbound_type_name.text)); }
                      | type  { $value = Expression.Constant(GetType($type.text)); }
                      | 'void' { $value = Expression.Constant(typeof(void)); } )   ')' ;
// unbound type examples
//foo<bar<X<>>>
//bar::foo<>
//foo1::foo2.foo3<,,>
public unbound_type_name:        // qualified_identifier v2
//    unbound_type_name_start unbound_type_name_part* ;
    unbound_type_name_start   
        (((generic_dimension_specifier   '.') => generic_dimension_specifier   unbound_type_name_part)
        | unbound_type_name_part)*   
            generic_dimension_specifier
    ;

public unbound_type_name_start:
    identifier ('::' identifier)?;
public unbound_type_name_part:
    '.'   identifier;
public generic_dimension_specifier: 
    '<'   commas?   '>' ;
public commas: 
    ','+ ; 

///////////////////////////////////////////////////////
//    Type Section
///////////////////////////////////////////////////////

public type_name returns [TypeOrGeneric value]: 
    namespace_or_type_name { $value = $namespace_or_type_name.value; };

public namespace_or_type_name returns [TypeOrGeneric value]:
     first=type_or_generic  { $value = $first.value; }  ('::' type_or_generic)? ('.' type_or_generic)* ;

public type_or_generic returns [TypeOrGeneric value]:
    (identifier   generic_argument_list) => identifier   generic_argument_list { $value = new TypeOrGeneric() { Identifier = $identifier.text, TypeArgs = $generic_argument_list.value }; }
    | identifier  { $value = new TypeOrGeneric() { Identifier = $identifier.text }; } ;

public qid:        // qualified_identifier v2
    qid_start   qid_part*
    ;
public qid_start:
    predefined_type
    | (identifier   generic_argument_list)    => identifier   generic_argument_list
//    | 'this'
//    | 'base'
    | identifier   ('::'   identifier)?
    | literal 
    ;        // 0.ToString() is legal


public qid_part:
    access_identifier ;

public generic_argument_list returns [List<Type> value]: 
    '<'   type_arguments   '>'  { $value = $type_arguments.value; };
public type_arguments returns [List<Type> value] 
@init{
	$value = new List<Type>();
}: 
    first=type { $value.Add(GetType($first.text)); } (',' succeeding=type { $value.Add(GetType($succeeding.text)); })* ;

public type returns [TypeOrGeneric value]:
      ((predefined_type | type_name)  rank_specifiers) => (predefined_type | type_name)   rank_specifiers   '*'* 
    | ((predefined_type | type_name)  ('*'+ | '?')) => (predefined_type | type_name)   ('*'+ | '?')
    | (predefined_type { $value = new TypeOrGeneric() { Identifier = $predefined_type.text }; }
	| type_name { $value = $type_name.value; })
    | 'void' '*'+
    ;
public non_nullable_type:
    (predefined_type | type_name)
        (   rank_specifiers   '*'*
            | ('*'+)?
        )
    | 'void'   '*'+ ;
    
public non_array_type:
    type;
public array_type:
    type;
public unmanaged_type:
    type;
public class_type:
    type;
public pointer_type:
    type;


///////////////////////////////////////////////////////
//    Statement Section
///////////////////////////////////////////////////////
public block returns [Expression value]:
    ';' { $value = Expression.Empty(); }
    | '{'   statement_list?   '}' 
	{ 
		var statements = $statement_list.value;
		return statements.ToBlock();
	};
public statement_list returns [StatementList value]
@init{
	$value = new StatementList();
}:
    (statement 
	{ 
		$value.Add($statement.value); 
	}
	)+ ;
    
///////////////////////////////////////////////////////
//    Expression Section
///////////////////////////////////////////////////////    

public single_expression returns [Expression value]: 
	expression { $value = $expression.value; } EOF;

public expression returns [Expression value]: 
    (unary_expression   assignment_operator) => assignment { $value = $assignment.value; }  \  
    | non_assignment_expression { value = $non_assignment_expression.value; }
    ;

public expression_list returns [List<Expression> values]
    @init
    {
    	$values = new List<Expression>();
    }:
    first=expression { $values.Add($first.value); }  (',' succeeding=expression { $values.Add($succeeding.value); })* ;

public assignment returns [Expression value]:
    unary_expression   assignment_operator   expression { 
		switch($assignment_operator.text) {
			case "=":	
				$value = ExpressionHelper.Assign($unary_expression.value, $expression.value, DynamicTypeLookup); 
				break;
			case "+=":
				$value = ExpressionHelper.BinaryOperator($unary_expression.value, $expression.value, ExpressionType.AddAssign); 
				break;
			case "-=":
				$value = ExpressionHelper.BinaryOperator($unary_expression.value, $expression.value, ExpressionType.SubtractAssign); 
				break;
			case "*=":
				$value = ExpressionHelper.BinaryOperator($unary_expression.value, $expression.value, ExpressionType.MultiplyAssign); 
				break;
			case "/=":
				$value = ExpressionHelper.BinaryOperator($unary_expression.value, $expression.value, ExpressionType.DivideAssign); 
				break;
			// Note: StringTemplate requires escaping the percent symbol
			case "\%=": 
				$value = ExpressionHelper.BinaryOperator($unary_expression.value, $expression.value, ExpressionType.ModuloAssign); 
				break;
			case "&=":
				$value = ExpressionHelper.BinaryOperator($unary_expression.value, $expression.value, ExpressionType.AndAssign); 
				break;
			case "|=":
				$value = ExpressionHelper.BinaryOperator($unary_expression.value, $expression.value, ExpressionType.OrAssign); 
				break;
			case "^=":
				$value = ExpressionHelper.BinaryOperator($unary_expression.value, $expression.value, ExpressionType.PowerAssign); 
				break;
			case "<<=":
				$value = ExpressionHelper.BinaryOperator($unary_expression.value, $expression.value, ExpressionType.LeftShiftAssign); 
				break;
			case ">>=":
				$value = ExpressionHelper.BinaryOperator($unary_expression.value, $expression.value, ExpressionType.RightShiftAssign); 
				break;
		}
	} ;
public unary_expression returns [Expression value]: 
    //('(' arguments ')' ('[' | '.' | '(')) => primary_or_array_creation_expression
    (cast_expression) => cast_expression { $value = $cast_expression.value; }
    | primary_or_array_creation_expression { $value = $primary_or_array_creation_expression.value; }
    | '+' uex=unary_expression 
    | '-' uex=unary_expression  { $value = ExpressionHelper.UnaryOperator($uex.value, ExpressionType.Negate); }
    | '!' uex=unary_expression  { $value = ExpressionHelper.UnaryOperator($uex.value, ExpressionType.Not); }
    | '~' uex=unary_expression  { $value = ExpressionHelper.UnaryOperator($uex.value, ExpressionType.Not); }
    | uex=pre_increment_expression  { $value = ExpressionHelper.UnaryOperator($uex.value, ExpressionType.PreIncrementAssign); }
    | uex=pre_decrement_expression  { $value = ExpressionHelper.UnaryOperator($uex.value, ExpressionType.PreDecrementAssign); }
    | pointer_indirection_expression
    | addressof_expression 
    ;
public cast_expression returns [Expression value]:
    '('   type   ')'   unary_expression { $value = Expression.Convert($unary_expression.value, GetType($type.text)); } ;
public assignment_operator:
    '=' | '+=' | '-=' | '*=' | '/=' | '%=' | '&=' | '|=' | '^=' | '<<=' | '>>=' ;
public pre_increment_expression returns [Expression value]: 
    '++'   unary_expression ;
public pre_decrement_expression returns [Expression value]: 
    '--'   unary_expression ;
public pointer_indirection_expression returns [Expression value]:
    '*'   unary_expression ;
public addressof_expression returns [Expression value]:
    '&'   unary_expression ;

public non_assignment_expression returns [Expression value]:
    //'non ASSIGNment'
    (anonymous_function_signature   '=>')    => lambda_expression { $value = $lambda_expression.value; }
    | (query_expression) => query_expression 
    | conditional_expression { $value = $conditional_expression.value; }
    ;

///////////////////////////////////////////////////////
//    Conditional Expression Section
///////////////////////////////////////////////////////

public multiplicative_expression returns [Expression value]:
	lex=unary_expression {
		$value = $lex.value;
	}
	(op=('*'|'/'|'%') rex=unary_expression
	{
		switch($op.text) 
		{ 
			case "*": $value = ExpressionHelper.BinaryOperator($value, $rex.value, ExpressionType.Multiply); break;
			case "/": $value = ExpressionHelper.BinaryOperator($value, $rex.value, ExpressionType.Divide); break;
			case "\%": $value = ExpressionHelper.BinaryOperator($value, $rex.value, ExpressionType.Modulo); break;
		};
	}
	)*;

public additive_expression returns [Expression value]:
	lex=multiplicative_expression {
		$value = $lex.value;
	}
	(op=('+'|'-') rex=multiplicative_expression
	{
		switch($op.text) 
		{ 
			case "+": $value = ExpressionHelper.BinaryOperator($value, $rex.value, ExpressionType.Add); break;
			case "-": $value = ExpressionHelper.BinaryOperator($value, $rex.value, ExpressionType.Subtract); break;
		};
	}
	)*;

// >> check needed (no whitespace)

public shift_expression returns [Expression value]:
	lex=additive_expression {
		$value = $lex.value;
	} 
	(op=('<<'|'>>') rex=additive_expression
	{
		switch($op.text) 
		{ 
			case "<<": $value = ExpressionHelper.BinaryOperator($value, $rex.value, ExpressionType.LeftShift); break;
			case ">>": $value = ExpressionHelper.BinaryOperator($value, $rex.value, ExpressionType.RightShift); break;
		};
	})*
	;

public relational_expression returns [Expression value]:
	lex=shift_expression {
		$value = $lex.value;
	}
	(op=('<'|'>'|'>='|'<=') rex=shift_expression
	{
		switch($op.text) 
		{ 
			case "<": $value = ExpressionHelper.BinaryOperator($value, $rex.value, ExpressionType.LessThan); break;
			case ">": $value = ExpressionHelper.BinaryOperator($value, $rex.value, ExpressionType.GreaterThan); break;
			case "<=": $value = ExpressionHelper.BinaryOperator($value, $rex.value, ExpressionType.LessThanOrEqual); break;
			case ">=": $value = ExpressionHelper.BinaryOperator($value, $rex.value, ExpressionType.GreaterThanOrEqual); break;
		};
	})*
	;
    //| lex=shift_expression 'is' rex=shift_expression  { $value = Expression.TypeIs($lex.value, $rex.value); }  
    //| lex=shift_expression 'as' rex=shift_expression  { $value = Expression.TypeAs($lex.value, $rex.value); }  ;

public equality_expression returns [Expression value]:
	lex=relational_expression {
		$value = $lex.value;
	}
	(op=('=='|'!=') rex=relational_expression
	{
		switch($op.text) 
		{ 
			case "==": $value = ExpressionHelper.BinaryOperator($value, $rex.value, ExpressionType.Equal); break;
			case "!=": $value = ExpressionHelper.BinaryOperator($value, $rex.value, ExpressionType.NotEqual); break;
		};
	})*
	;

public and_expression returns [Expression value]:
	lex=equality_expression {
		$value = $lex.value;
	}
	('&' rex=equality_expression
	{
		$value = ExpressionHelper.BinaryOperator($value, $rex.value, ExpressionType.And);
	})*
	;

public exclusive_or_expression returns [Expression value]:
	lex=and_expression {
		$value = $lex.value;
	}
	('^' rex=and_expression
	{
		$value = ExpressionHelper.BinaryOperator($value, $rex.value, ExpressionType.ExclusiveOr);
	})*;

public inclusive_or_expression returns [Expression value]:
	lex=exclusive_or_expression {
		$value = $lex.value;
	}
	('|' rex=exclusive_or_expression
	{
		 $value = ExpressionHelper.BinaryOperator($value, $rex.value, ExpressionType.Or);
	})*
	;

public conditional_and_expression returns [Expression value]:
	lex=inclusive_or_expression {
		$value = $lex.value;
	}
	('&&' rex=inclusive_or_expression
	{
		 $value = ExpressionHelper.BinaryOperator($value, $rex.value, ExpressionType.AndAlso);
	})*
	;

public conditional_or_expression returns [Expression value]:
	lex=conditional_and_expression {
		$value = $lex.value;
	}
	('||' rex=conditional_and_expression
	{
		$value = ExpressionHelper.BinaryOperator($value, $rex.value, ExpressionType.OrElse);  
	})*
	;

public null_coalescing_expression returns [Expression value]:
	lex=conditional_or_expression {
		$value = $lex.value;
	}
	('??' rex=conditional_or_expression
	{
		 $value = ExpressionHelper.BinaryOperator($value, $rex.value, ExpressionType.Coalesce); 
	})*
	;

public conditional_expression returns [Expression value]:
	null_coalescing_expression {
		$value = $null_coalescing_expression.value;
	}
	('?' iftrue=expression ':' iffalse=expression
	{
		 $value = ExpressionHelper.Condition($value, $iftrue.value, $iffalse.value);
	})?
	;
     
///////////////////////////////////////////////////////
//    lambda Section
///////////////////////////////////////////////////////
public lambda_expression returns [Expression value]:
    anonymous_function_signature { ParameterList.Add($anonymous_function_signature.value); }  
	'=>'   anonymous_function_body 
	{ 
		$value = Expression.Lambda($anonymous_function_body.value, $anonymous_function_signature.value.ToArray()); 
		ParameterList.Remove($anonymous_function_signature.value); 
	};

public anonymous_function_signature returns [List<ParameterExpression> value]:
    '('    (explicit_anonymous_function_parameter_list
        | implicit_anonymous_function_parameter_list { $value = $implicit_anonymous_function_parameter_list.value; })?    ')'
    | implicit_anonymous_function_parameter_list { $value = $implicit_anonymous_function_parameter_list.value; }
    ;

public implicit_anonymous_function_parameter_list returns [List<ParameterExpression> value]
@init{
	$value = new List<ParameterExpression>();
}:
    first=implicit_anonymous_function_parameter  { $value.Add($first.value); } (','  succeeding=implicit_anonymous_function_parameter { $value.Add($succeeding.value); } )* ;
public implicit_anonymous_function_parameter returns [ParameterExpression value]:
    identifier { $value = Expression.Parameter(typeof(object), $identifier.text ); };
public anonymous_function_body returns [Expression value]:
    expression { $value = $expression.value; }
    | block { $value = $block.value; };

///////////////////////////////////////////////////////
//    LINQ Section
///////////////////////////////////////////////////////
public query_expression:
    from_clause   query_body ;
public query_body:
    // match 'into' to closest query_body
    query_body_clauses?   select_or_group_clause   (('into') => query_continuation)? ;
public query_continuation:
    'into'   identifier   query_body;
public query_body_clauses:
    query_body_clause+ ;
public query_body_clause:
    from_clause
    | let_clause
    | where_clause
    | join_clause
    | orderby_clause;
public from_clause:
    'from'   type?   identifier   'in'   expression ;
public join_clause:
    'join'   type?   identifier   'in'   expression   'on'   expression   'equals'   expression ('into' identifier)? ;
public let_clause:
    'let'   identifier   '='   expression;
public orderby_clause:
    'orderby'   ordering_list ;
public ordering_list:
    ordering   (','   ordering)* ;
public ordering:
    expression    ordering_direction
    ;
public ordering_direction:
    'ascending'
    | 'descending' ;
public select_or_group_clause:
    select_clause
    | group_clause ;
public select_clause:
    'select'   expression ;
public group_clause:
    'group'   expression   'by'   expression ;
public where_clause:
    'where'   boolean_expression ;

public boolean_expression returns [Expression value]:
    expression { $value = $expression.value; };

///////////////////////////////////////////////////////
// B.2.13 Attributes
///////////////////////////////////////////////////////
public global_attributes: 
    global_attribute+ ;
public global_attribute: 
    '['   global_attribute_target_specifier   attribute_list   ','?   ']' ;
public global_attribute_target_specifier: 
    global_attribute_target   ':' ;
public global_attribute_target: 
    'assembly' | 'module' ;
public attributes: 
    attribute_sections ;
public attribute_sections: 
    attribute_section+ ;
public attribute_section: 
    '['   attribute_target_specifier?   attribute_list   ','?   ']' ;
public attribute_target_specifier: 
    attribute_target   ':' ;
public attribute_target: 
    'field' | 'event' | 'method' | 'param' | 'property' | 'return' | 'type' ;
public attribute_list: 
    attribute (',' attribute)* ; 
public attribute: 
    type_name   attribute_arguments? ;
// TODO:  allows a mix of named/positional arguments in any order
public attribute_arguments: 
    '('   (')'                                        // empty
           | (positional_argument   ((','   identifier   '=') => named_argument
                                        |','    positional_argument)*
              )    ')'
            ) ;
public positional_argument_list: 
    positional_argument (',' positional_argument)* ;
public positional_argument: 
    attribute_argument_expression ;
public named_argument_list: 
    named_argument (',' named_argument)* ;
public named_argument: 
    identifier   '='   attribute_argument_expression ;
public attribute_argument_expression: 
    expression ;

///////////////////////////////////////////////////////
//    Class Section
///////////////////////////////////////////////////////

public class_declaration:
    'class'  type_or_generic   class_base?   type_parameter_constraints_clauses?   class_body   ';'? ;
public class_base:
    // syntactically base class vs interface name is the same
    //':'   class_type (','   interface_type_list)? ;
    ':'   interface_type_list ;
    
public interface_type_list:
    type (','   type)* ;

public class_body:
    '{'   class_member_declarations?   '}' ;
public class_member_declarations:
    class_member_declaration+ ;

///////////////////////////////////////////////////////
public constant_declaration:
    'const'   type   constant_declarators   ';' ;
public constant_declarators:
    constant_declarator (',' constant_declarator)* ;
public constant_declarator:
    identifier   ('='   constant_expression)? ;
public constant_expression returns [Expression value]:
    expression { $value = $expression.value; };

///////////////////////////////////////////////////////
public field_declaration returns [Expression value]:
    variable_declarators { $value = $variable_declarators.value; }  ';'    ;
public variable_declarators returns [Expression value]:
    first=variable_declarator  { $value = $first.value; }  (','  succeeding=variable_declarator)* ;
public variable_declarator returns [Expression value]:
    type_name ('='   variable_initializer)? ;        // eg. event EventHandler IInterface.VariableName = Foo;

///////////////////////////////////////////////////////
public method_declaration:
    method_header   method_body ;
public method_header:
    member_name  '('   formal_parameter_list?   ')'   type_parameter_constraints_clauses? ;
public method_body:
    block ;
public member_name:
    qid ;        // IInterface<int>.Method logic added.

///////////////////////////////////////////////////////
public property_declaration:
    member_name   '{'   accessor_declarations   '}' ;
public accessor_declarations:
    attributes?
        (get_accessor_declaration   attributes?   set_accessor_declaration?
        | set_accessor_declaration   attributes?   get_accessor_declaration?) ;
public get_accessor_declaration:
    accessor_modifier?   'get'   accessor_body ;
public set_accessor_declaration:
    accessor_modifier?   'set'   accessor_body ;
public accessor_modifier:
    'public' | 'protected' | 'private' | 'internal' ;
public accessor_body:
    block ;

///////////////////////////////////////////////////////
public event_declaration:
    'event'   type
        ((member_name   '{') => member_name   '{'   event_accessor_declarations   '}'
        | variable_declarators   ';')    // typename=foo;
        ;
public event_modifiers:
    modifier+ ;
public event_accessor_declarations:
    attributes?   ((add_accessor_declaration   attributes?   remove_accessor_declaration)
                  | (remove_accessor_declaration   attributes?   add_accessor_declaration)) ;
public add_accessor_declaration:
    'add'   block ;
public remove_accessor_declaration:
    'remove'   block ;

///////////////////////////////////////////////////////
//    enum declaration
///////////////////////////////////////////////////////
public enum_declaration:
    'enum'   identifier   enum_base?   enum_body   ';'? ;
public enum_base:
    ':'   integral_type ;
public enum_body:
    '{' (enum_member_declarations ','?)?   '}' ;
public enum_member_declarations:
    enum_member_declaration (',' enum_member_declaration)* ;
public enum_member_declaration:
    attributes?   identifier   ('='   expression)? ;
//enum_modifiers:
//    enum_modifier+ ;
//enum_modifier:
//    'new' | 'public' | 'protected' | 'internal' | 'private' ;
public integral_type: 
    'sbyte' | 'byte' | 'short' | 'ushort' | 'int' | 'uint' | 'long' | 'ulong' | 'char' ;

// B.2.12 Delegates
public delegate_declaration:
    'delegate'   return_type   identifier  variant_generic_parameter_list?   
        '('   formal_parameter_list?   ')'   type_parameter_constraints_clauses?   ';' ;
public delegate_modifiers:
    modifier+ ;
// 4.0
public variant_generic_parameter_list:
    '<'   variant_type_parameters   '>' ;
public variant_type_parameters:
    variant_type_variable_name (',' variant_type_variable_name)* ;
public variant_type_variable_name:
    attributes?   variance_annotation?   type_variable_name ;
public variance_annotation:
    'in' | 'out' ;

public type_parameter_constraints_clauses:
    type_parameter_constraints_clause   (','   type_parameter_constraints_clause)* ;
public type_parameter_constraints_clause:
    'where'   type_variable_name   ':'   type_parameter_constraint_list ;
// class, Circle, new()
public type_parameter_constraint_list:                                                   
   ('class' | 'struct')   (','   secondary_constraint_list)?   (','   constructor_constraint)?
    | secondary_constraint_list   (','   constructor_constraint)?
    | constructor_constraint ;
//primary_constraint:
//    class_type
//    | 'class'
//    | 'struct' ;
public secondary_constraint_list:
    secondary_constraint (',' secondary_constraint)* ;
public secondary_constraint:
    type_name ;    // | type_variable_name) ;
public type_variable_name: 
    identifier ;
public constructor_constraint:
    'new'   '('   ')' ;
public return_type:
    type
    |  'void';
public formal_parameter_list:
    formal_parameter (',' formal_parameter)* ;
public formal_parameter:
    attributes?   (fixed_parameter | parameter_array) 
    | '__arglist';    // __arglist is undocumented, see google
public fixed_parameters:
    fixed_parameter   (','   fixed_parameter)* ;
// 4.0
public fixed_parameter:
    parameter_modifier?   type   identifier   default_argument? ;
// 4.0
public default_argument:
    '=' expression;
public parameter_modifier:
    'ref' | 'out' | 'this' ;
public parameter_array:
    'params'   type   identifier ;

///////////////////////////////////////////////////////
public interface_declaration:
    'interface'   identifier   variant_generic_parameter_list? 
       interface_base?   type_parameter_constraints_clauses?   interface_body   ';'? ;
public interface_modifiers: 
    modifier+ ;
public interface_base: 
      ':' interface_type_list ;
public interface_body:
    '{'   interface_member_declarations?   '}' ;
public interface_member_declarations:
    interface_member_declaration+ ;
public interface_member_declaration:
    attributes?    modifiers?
        ('void'   interface_method_declaration
        | interface_event_declaration
        | type   ( (member_name   '(') => interface_method_declaration
                 | (member_name   '{') => interface_property_declaration 
                 | interface_indexer_declaration)
        ) 
        ;
public interface_property_declaration: 
    identifier   '{'   interface_accessor_declarations   '}' ;
public interface_method_declaration:
    identifier   generic_argument_list?
        '('   formal_parameter_list?   ')'   type_parameter_constraints_clauses?   ';' ;
public interface_event_declaration: 
    //attributes?   'new'?   
    'event'   type   identifier   ';' ; 
public interface_indexer_declaration: 
    // attributes?    'new'?    type   
    'this'   '['   formal_parameter_list   ']'   '{'   interface_accessor_declarations   '}' ;
public interface_accessor_declarations:
    attributes?   
        (interface_get_accessor_declaration   attributes?   interface_set_accessor_declaration?
        | interface_set_accessor_declaration   attributes?   interface_get_accessor_declaration?) ;
public interface_get_accessor_declaration:
    'get'   ';' ;        // no body / modifiers
public interface_set_accessor_declaration:
    'set'   ';' ;        // no body / modifiers
public method_modifiers:
    modifier+ ;
    
///////////////////////////////////////////////////////
public struct_declaration:
    'struct'   type_or_generic   struct_interfaces?   type_parameter_constraints_clauses?   struct_body   ';'? ;
public struct_modifiers:
    struct_modifier+ ;
public struct_modifier:
    'new' | 'public' | 'protected' | 'internal' | 'private' | 'unsafe' ;
public struct_interfaces:
    ':'   interface_type_list;
public struct_body:
    '{'   struct_member_declarations?   '}';
public struct_member_declarations:
    struct_member_declaration+ ;
public struct_member_declaration:
    attributes?   m=modifiers?
    ( 'const'   type   constant_declarators   ';'
    | event_declaration        // 'event'
    | 'partial' (method_declaration 
               | interface_declaration 
               | class_declaration 
               | struct_declaration)

    | interface_declaration    // 'interface'
    | class_declaration        // 'class'
    | 'void'   method_declaration
    | type ( (member_name   '(') => method_declaration
           | (member_name   '{') => property_declaration
           | (member_name   '.'   'this') => type_name '.' indexer_declaration
           | indexer_declaration    //this
           | field_declaration      // qid
           | operator_declaration
           )
//    common_modifiers// (method_modifiers | field_modifiers)
    
    | struct_declaration    // 'struct'       
    | enum_declaration        // 'enum'
    | delegate_declaration    // 'delegate'
    | conversion_operator_declaration
    | constructor_declaration    //    | static_constructor_declaration
    ) 
    ;


///////////////////////////////////////////////////////
public indexer_declaration:
    indexer_declarator   '{'   accessor_declarations   '}' ;
public indexer_declarator:
    //(type_name '.')?   
    'this'   '['   formal_parameter_list   ']' ;
    
///////////////////////////////////////////////////////
public operator_declaration:
    operator_declarator   operator_body ;
public operator_declarator:
    'operator' 
    (('+' | '-')   '('   type   identifier   (binary_operator_declarator | unary_operator_declarator)
        | overloadable_unary_operator   '('   type identifier   unary_operator_declarator
        | overloadable_binary_operator   '('   type identifier   binary_operator_declarator) ;
public unary_operator_declarator:
       ')' ;
public overloadable_unary_operator:
    /*'+' |  '-' | */ '!' |  '~' |  '++' |  '--' |  'true' |  'false' ;
public binary_operator_declarator:
    ','   type   identifier   ')' ;
// >> check needed
public overloadable_binary_operator:
    /*'+' | '-' | */ '*' | '/' | '%' | '&' | '|' | '^' | '<<' | '>' '>' | '==' | '!=' | '>' | '<' | '>=' | '<=' ; 

public conversion_operator_declaration:
    conversion_operator_declarator   operator_body ;
public conversion_operator_declarator:
    ('implicit' | 'explicit')  'operator'   type   '('   type   identifier   ')' ;
public operator_body:
    block ;

///////////////////////////////////////////////////////
public constructor_declaration:
    constructor_declarator   constructor_body ;
public constructor_declarator:
    identifier   '('   formal_parameter_list?   ')'   constructor_initializer? ;
public constructor_initializer:
    ':'   ('base' | 'this')   '('   argument_list?   ')' ;
public constructor_body:
    block ;

///////////////////////////////////////////////////////
//static_constructor_declaration:
//    identifier   '('   ')'  static_constructor_body ;
//static_constructor_body:
//    block ;

///////////////////////////////////////////////////////
public destructor_declaration:
    '~'  identifier   '('   ')'    destructor_body ;
public destructor_body:
    block ;

///////////////////////////////////////////////////////
public invocation_expression:
    invocation_start   (((arguments   ('['|'.'|'->')) => arguments   invocation_part)
                        | invocation_part)*   arguments ;
public invocation_start:
    predefined_type 
    | (identifier    generic_argument_list)    => identifier   generic_argument_list
    | 'this' 
    | 'base'
    | identifier   ('::'   identifier)?
    | typeof_expression             // typeof(Foo).Name
    ;
public invocation_part:
     access_identifier
    | brackets ;

///////////////////////////////////////////////////////

public statement returns [Statement value]:
    (declaration_statement) => declaration_statement { $value = $declaration_statement.value; }
    | (identifier   ':') => labeled_statement
    | embedded_statement { $value = new Statement() { Expression = $embedded_statement.value }; }
    ;
public embedded_statement returns [Expression value]:
    block { $value = $block.value; } 
    | selection_statement { $value = $selection_statement.value; }    // if, switch
    | iteration_statement { $value = $iteration_statement.value; }   // while, do, for, foreach
    | jump_statement  { $value = $jump_statement.value; }         // break, continue, goto, return, throw
    | try_statement 
    | checked_statement
    | unchecked_statement 
    | lock_statement 
    | using_statement  
    | yield_statement  
    | unsafe_statement 
    | fixed_statement 
    | expression_statement { $value = $expression_statement.value; }    // expression!
    ;

public fixed_statement:
    'fixed'   '('   pointer_type fixed_pointer_declarators   ')'   embedded_statement ;

public fixed_pointer_declarators:
    fixed_pointer_declarator   (','   fixed_pointer_declarator)* ;

public fixed_pointer_declarator:
    identifier   '='   fixed_pointer_initializer ;

public fixed_pointer_initializer:
    //'&'   variable_reference   // unary_expression covers this
    expression;

public unsafe_statement:
    'unsafe'   block;

public labeled_statement:
    identifier   ':'   statement ;

public declaration_statement returns [DeclarationStatement value]:
    (local_variable_declaration { $value = $local_variable_declaration.value; } 
    | local_constant_declaration { $value = $local_constant_declaration.value; }) ';' ;

public local_variable_declaration returns [LocalVariableDeclaration value]:
    local_variable_type   local_variable_declarators { 
		var result = new LocalVariableDeclaration();

		foreach(var variable in $local_variable_declarators.value)
		{
			Type varType = null;

			if($local_variable_type.value.Identifier == "var" && variable.Initializer != null)
			{
				varType = variable.Initializer.Type;
			}
			else
			{
				varType = GetType($local_variable_type.value.Identifier);
			}

			var parameter = Expression.Variable(varType, variable.Identifier);
			result.Variables.Add(parameter);
			
			ParameterList.Add(parameter);

			if(variable.Initializer != null) {
				result.Initializers.Add(Expression.Assign(parameter, variable.Initializer));
			}
		}
		
		// ParameterList.Add(parameters);
		
		// result.Expression = Expression.RuntimeVariables(parameters);
		$value = result;
	} ;

public local_constant_declaration returns [LocalConstDeclaration value]:
    'const'   type   constant_declarators ;

public local_variable_type returns [TypeOrGeneric value]:
    ('var') => 'var'  { $value = new TypeOrGeneric() { Identifier = "var" } ; }
    | ('dynamic') => 'dynamic' { $value = new TypeOrGeneric() { Identifier = "dynamic" } ; }
    | type { $value = $type.value; } ;

public local_variable_declarators returns [List<Variable> value] @init { $value =  new List<Variable>(); }:
    first=local_variable_declarator { $value.Add($first.value); } (',' succeeding=local_variable_declarator { $value.Add($succeeding.value); })* ;

public local_variable_declarator returns [Variable value]:
    identifier { $value = new Variable() { Identifier = $identifier.text }; } ('='   local_variable_initializer { $value.Initializer = $local_variable_initializer.value; })? ; 

public local_variable_initializer returns [Expression value]:
    expression { $value = $expression.value; }
    | array_initializer { $value = $array_initializer.value; }
    | stackalloc_initializer;

public stackalloc_initializer:
    'stackalloc'   unmanaged_type   '['   expression   ']' ;

public expression_statement returns [Expression value]:
    expression   ';' { $value = $expression.value; } ;


// TODO: should be assignment, call, increment, decrement, and new object expressions
public selection_statement returns [Expression value]:
    if_statement { $value = $if_statement.value; }
    | switch_statement  { $value = $switch_statement.value; } ;

public if_statement returns [Expression value]:
    // else goes with closest if
    'if'   '('   boolean_expression   ')'  embedded_statement (('else') => else_statement )?
	 {
		var boolExp = $boolean_expression.value;
		
		if(boolExp.Type != typeof(System.Boolean))
		{
			boolExp = Expression.Convert(boolExp, typeof(bool));
		}

		if($else_statement.value == null)
		{
			$value = Expression.IfThen(boolExp, $embedded_statement.value); 
		}
		else
		{
			$value = Expression.IfThenElse(boolExp, $embedded_statement.value, $else_statement.value); 
		}
	 }
     ; 

public else_statement returns [Expression value]:
    'else'   embedded_statement { $value = $embedded_statement.value; };

public switch_statement returns [Expression value]
@init{ var breakTarget = compilerState.PushBreak(); }
@after{ compilerState.PopBreak(); }:
    'switch'   '('   expression   ')'   switch_block  { 
		$value = ExpressionHelper.Switch(breakTarget, $expression.value, $switch_block.value);
	};

public switch_block returns [List<SwitchCase> value]:
    '{'   switch_sections?  '}' { $value = $switch_sections.value; };

public switch_sections returns [List<SwitchCase> value]
@init{
	$value = new List<SwitchCase>();
}:
    (switch_section { $value.Add($switch_section.value); } )+ ;

public switch_section returns [SwitchCase value]:
    switch_labels   statement_list { $value = Expression.SwitchCase(Expression.Block($statement_list.value.Expressions), $switch_labels.value); } ;

public switch_labels returns [List<Expression> value]
@init{
	$value = new List<Expression>();
}:
    (switch_label { $value.Add($switch_label.value); } )+ ;

public switch_label returns [Expression value]:
    ('case'   constant_expression   ':') { $value = $constant_expression.value; }
    | ('default'   ':') { $value = Expression.Empty(); } ; 

public iteration_statement returns [Expression value]:
    while_statement { $value = $while_statement.value; }
    | do_statement { $value = $do_statement.value; }
    | for_statement { $value = $for_statement.value; }
    | foreach_statement { $value = $foreach_statement.value; };

public while_statement returns [Expression value] 
@init{ var breakTarget = compilerState.PushBreak(); var continueTarget = compilerState.PushContinue(); }
@after{ compilerState.PopContinue(); compilerState.PopBreak(); }:
    'while' '('   boolean_expression   ')'   embedded_statement 
	{ $value = ExpressionHelper.While(breakTarget, continueTarget, null, $boolean_expression.value, $embedded_statement.value); };

public do_statement returns [Expression value]
@init{ var breakTarget = compilerState.PushBreak(); var continueTarget = compilerState.PushContinue(); }
@after{ compilerState.PopContinue(); compilerState.PopBreak(); }:
    'do'   embedded_statement   'while'   '('   boolean_expression   ')'   ';' 
	{ $value = ExpressionHelper.DoWhile(breakTarget, continueTarget, $embedded_statement.value, $boolean_expression.value); };

public for_statement returns [Expression value]
@init{ var breakTarget = compilerState.PushBreak(); var continueTarget = compilerState.PushContinue(); }
@after{ compilerState.PopContinue(); compilerState.PopBreak(); }:
    'for'   '('   for_initializer?   ';'   for_condition?   ';'   for_iterator?   ')'   embedded_statement 
	{ $value = ExpressionHelper.For(breakTarget, continueTarget, $for_initializer.value, $for_condition.value, $for_iterator.value, $embedded_statement.value); };

public foreach_statement returns [Expression value]
@init{ ParameterExpression parameter = null; var breakTarget = compilerState.PushBreak(); var continueTarget = compilerState.PushContinue(); }
@after{ compilerState.PopContinue(); compilerState.PopBreak(); }:
    'foreach'   '('   local_variable_type   identifier  'in'   expression   ')' 
	 {
		var typeName = $local_variable_type.value.Identifier;
		Type type = null;

		if(typeName == "var")
		{
            if ($expression.value.Type.GetTypeInfo().IsGenericType)
            {
                type = $expression.value.Type.GetTypeInfo().GenericTypeArguments[0];
            }
			else if ($expression.value.Type.IsArray)
			{
				type = $expression.value.Type.GetElementType();
			}
			else
			{
				type = typeof (object);
			}
		}
		else
		{
			type = GetType(typeName);
		}

		parameter = Expression.Variable(type, $identifier.text);

		ParameterList.Add(parameter);
	
	}
	embedded_statement 
	{ 
		$value = ExpressionHelper.ForEach(breakTarget, continueTarget, parameter, $expression.value, $embedded_statement.value); 
	};

public for_initializer returns [MultiStatement value]:
    (local_variable_declaration) => local_variable_declaration { $value = $local_variable_declaration.value; }
    | statement_expression_list { $value = $statement_expression_list.value; }
    ;

public for_condition returns [Expression value]:
    boolean_expression { $value = $boolean_expression.value; };

public for_iterator returns [StatementList value]:
    statement_expression_list { $value = $statement_expression_list.value; } ;

public statement_expression_list returns [StatementList value] @init{ $value = new StatementList(); }:
    first=statement_expression { $value.Add($first.value); } (',' succeeding=statement_expression { $value.Add($succeeding.value); } )* ;

public statement_expression returns [Expression value]:
    expression { $value = $expression.value; } ;

public jump_statement returns [Expression value]:
    break_statement { $value = $break_statement.value; }
    | continue_statement { $value = $continue_statement.value; }
    | goto_statement
    | return_statement { $value = $return_statement.value; }
    | throw_statement ;

public break_statement returns [Expression value]:
    'break'   ';' { $value = compilerState.Break(); };

public continue_statement returns [Expression value]:
    'continue'   ';' { $value = compilerState.Continue(); };

public goto_statement:
    'goto'   ( identifier
             | 'case'   constant_expression
             | 'default')   ';' ;

public return_statement returns [Expression value]:
    'return'   expression?  { 
		HasReturn = true;
		if($expression.value == null) 
		{ 
			$value = Expression.Return(ReturnTarget); 
		} 
		else 
		{ 
			$value = Expression.Return(ReturnTarget, $expression.value, ReturnTarget.Type); 
		} 
	}  ';' ;

public throw_statement:
    'throw'   expression?   ';' ;

public try_statement:
     'try'   block   ( catch_clauses   finally_clause?
                      | finally_clause);
//TODO one or both
public catch_clauses:
    'catch'   (specific_catch_clauses | general_catch_clause) ;

public specific_catch_clauses:
    specific_catch_clause   ('catch'   (specific_catch_clause | general_catch_clause))*;

public specific_catch_clause:
    '('   class_type   identifier?   ')'   block ;

public general_catch_clause:
    block ;

public finally_clause:
    'finally'   block ;

public checked_statement:
    'checked'   block ;

public unchecked_statement:
    'unchecked'   block ;

public lock_statement:
    'lock'   '('  expression   ')'   embedded_statement ;

public using_statement:
    'using'   '('    resource_acquisition   ')'    embedded_statement ;

public resource_acquisition:
    (local_variable_declaration) => local_variable_declaration
    | expression ;

public yield_statement:
    'yield'   ('return'   expression   ';'
              | 'break'   ';') ;

///////////////////////////////////////////////////////
//    Lexar Section
///////////////////////////////////////////////////////

public predefined_type:
      'bool' | 'byte'   | 'char'   | 'decimal' | 'double' | 'float'  | 'int'    | 'long'   | 'object' | 'sbyte'  
    | 'short'  | 'string' | 'uint'   | 'ulong'  | 'ushort' ;

public identifier returns [Expression value]:
    IDENTIFIER { $value = GetIdentifier($IDENTIFIER.text); } | also_keyword { $value = GetIdentifier($also_keyword.text); }; 

public keyword:
    'abstract' | 'as' | 'base' | 'bool' | 'break' | 'byte' | 'case' |  'catch' | 'char' | 'checked' | 'class' | 'const' | 'continue' | 'decimal' | 'default' | 'delegate' | 'do' |    'double' | 'else' |     'enum'  | 'event' | 'explicit' | 'extern' | 'false' | 'finally' | 'fixed' | 'float' | 'for' | 'foreach' | 'goto' | 'if' | 'implicit' | 'in' | 'int' | 'interface' | 'internal' | 'is' | 'lock' | 'long' | 'namespace' | 'new' | 'null' | 'object' | 'operator' | 'out' | 'override' | 'params' | 'private' | 'protected' | 'public' | 'readonly' | 'ref' | 'return' | 'sbyte' | 'sealed' | 'short' | 'sizeof' | 'stackalloc' | 'static' | 'string' | 'struct' | 'switch' | 'this' | 'throw' | 'true' | 'try' | 'typeof' | 'uint' | 'ulong' | 'unchecked' | 'unsafe' | 'ushort' | 'using' | 'virtual' | 'void' | 'volatile' ;

public also_keyword:
    'add' | 'alias' | 'assembly' | 'module' | 'field' | 'method' | 'param' | 'property' | 'type' | 'yield'
    | 'from' | 'into' | 'join' | 'on' | 'where' | 'orderby' | 'group' | 'by' | 'ascending' | 'descending' 
    | 'equals' | 'select' | 'pragma' | 'let' | 'remove' | 'get' | 'set' | 'var' | '__arglist' | 'dynamic' | 'elif' 
    | 'endif' | 'define' | 'undef';

public literal returns [Expression value]:
    Real_literal { $value = ExpressionHelper.ParseRealLiteral($Real_literal.text); }
//    | Date_literal { $value = ExpressionHelper.ParseDateLiteral($Date_literal.text); }
    | NUMBER { $value = ExpressionHelper.ParseIntLiteral($NUMBER.text); }
    | Hex_number { $value = ExpressionHelper.ParseHexLiteral($Hex_number.text); }
    | Character_literal { $value = ExpressionHelper.ParseCharLiteral($Character_literal.text); }
    | STRINGLITERAL { $value = ExpressionHelper.ParseStringLiteral($STRINGLITERAL.text); }
    | Verbatim_string_literal { $value = ExpressionHelper.ParseStringLiteral($Verbatim_string_literal.text); }
    | TRUE { $value = Expression.Constant(true); }
    | FALSE { $value = Expression.Constant(false); }
    | NULL  { $value = Expression.Constant(null); }
    ;

///////////////////////////////////////////////////////

TRUE : 'true';
FALSE : 'false' ;
NULL : 'null' ;
DOT : '.' ;
PTR : '->' ;
MINUS : '-' ;
GT : '>' ;
USING : 'using';
ENUM : 'enum';
IF: 'if';
ELIF: 'elif';
ENDIF: 'endif';
DEFINE: 'define';
UNDEF: 'undef';
SEMI: ';';
LPAREN: '(';
RPAREN: ')';

WS:
   (' '  |  '\r'  |  '\t'  |  '\n'  ) 
   { Skip(); } ;
fragment
TS:
   (' '  |  '\t'  ) 
   { Skip(); } ;
DOC_LINE_COMMENT
   :     ('///' ~('\n'|'\r')*  ('\r' | '\n')+)
   { Skip(); } ;
LINE_COMMENT
   :    ('//' ~('\n'|'\r')*  ('\r' | '\n')+)
   { Skip(); } ;
COMMENT:
  '/*'
  (options {greedy=false;} : . )* 
  '*/'
    { Skip(); } ;
STRINGLITERAL
    :
    '"' (StringEscapeSequence | ~('"' | '\\'))* '"'
	| '\'' (StringEscapeSequence  | ~('\'' | '\\'))* '\'' ;  // ExpressionEvaluator in-string strings
Verbatim_string_literal:
    '@'  '"' Verbatim_string_literal_character* '"' 
	| '@' '\'' Verbatim_string_literal_character* '\'' ;  // ExpressionEvaluator in-string strings
fragment
Verbatim_string_literal_character:
    '"' '"' | ~('"') ;
NUMBER:
    ('-')? Decimal_digits INTEGER_TYPE_SUFFIX?;
// For the rare case where 0.ToString() etc is used.
GooBall
@after        
{
    CommonToken int_literal = new CommonToken(NUMBER, $dil.text);
    CommonToken dot = new CommonToken(DOT, ".");
    CommonToken iden = new CommonToken(IDENTIFIER, $s.text);
    
    Emit(int_literal); 
    Emit(dot); 
    Emit(iden); 
}
    :
    dil = Decimal_integer_literal d = '.' s=GooBallIdentifier
    ;

fragment GooBallIdentifier
    : IdentifierStart IdentifierPart* ;

//---------------------------------------------------------
// Date_literal:
//  '#' ~('#')+ '#';
Real_literal:
    ('-')? Decimal_digits   '.'   Decimal_digits   Exponent_part?   Real_type_suffix?
    | ('-')? '.'   Decimal_digits   Exponent_part?   Real_type_suffix?
    | ('-')? Decimal_digits   Exponent_part   Real_type_suffix?
    | ('-')? Decimal_digits   Real_type_suffix;
Character_literal:
	// Expression Eval changes
    'c\''
   (   EscapeSequence
    // upto 3 multi byte unicode chars
   |   ~( '\\' | '\'' | '\r' | '\n' )        
   |   ~( '\\' | '\'' | '\r' | '\n' ) ~( '\\' | '\'' | '\r' | '\n' )
   |   ~( '\\' | '\'' | '\r' | '\n' ) ~( '\\' | '\'' | '\r' | '\n' ) ~( '\\' | '\'' | '\r' | '\n' )
   )
   '\'' ;
IDENTIFIER:
   IdentifierStart IdentifierPart* ;
Pragma:
    //    ignore everything after the pragma since the escape's in strings etc. are different
    '#'   TS*   ('pragma' | 'region' | 'endregion' | 'line' | 'warning' | 'error') ~('\n'|'\r')*  ('\r' | '\n')+
   { Skip(); } ;
PREPROCESSOR_DIRECTIVE:
    PP_CONDITIONAL;
fragment
PP_CONDITIONAL:
    (IF_TOKEN
    | DEFINE_TOKEN
    | ELSE_TOKEN
    | ENDIF_TOKEN 
    | UNDEF_TOKEN)   TS*   (LINE_COMMENT?  |  ('\r' | '\n')+) ;
fragment
IF_TOKEN
    @init { bool process = true; }:
    ('#'   TS*  'if'   TS+   ppe = PP_EXPRESSION)
{
   // if our parent is processing check this if
   Debug.Assert(Processing.Count > 0, "Stack underflow preprocessing.  IF_TOKEN");
   if (Processing.Count > 0 && Processing.Peek())
        Processing.Push(Returns.Pop());
    else
        Processing.Push(false);
} ;
fragment
DEFINE_TOKEN:
    '#'   TS*   'define'   TS+   define = IDENTIFIER
    {
        MacroDefines.Add($define.Text, "");
    } ;
fragment
UNDEF_TOKEN:
    '#'   TS*   'undef'   TS+   define = IDENTIFIER
    {
        if (MacroDefines.ContainsKey($define.Text))
            MacroDefines.Remove($define.Text);
    } ;
fragment
ELSE_TOKEN:
    ( '#'   TS*   e = 'else'
    | '#'   TS*   'elif'   TS+   PP_EXPRESSION)
    {
        // We are in an elif
          if ($e == null)
        {
            Debug.Assert(Processing.Count > 0, "Stack underflow preprocessing.  ELIF_TOKEN");
            if (Processing.Count > 0 && Processing.Peek() == false)
            {
                Processing.Pop();
                // if our parent was processing, do else logic
                Debug.Assert(Processing.Count > 0, "Stack underflow preprocessing.  ELIF_TOKEN2");
                if (Processing.Count > 0 && Processing.Peek())
                    Processing.Push(Returns.Pop());
                else
                    Processing.Push(false);
            }
            else
            {
                Processing.Pop();
                Processing.Push(false);
            }
        }
        else
        {
            // we are in a else
            if (Processing.Count > 0)
            {
                bool bDoElse = !Processing.Pop();

                // if our parent was processing                
                Debug.Assert(Processing.Count > 0, "Stack underflow preprocessing, ELSE_TOKEN");
                if (Processing.Count > 0 && Processing.Peek())
                    Processing.Push(bDoElse);
                else
                    Processing.Push(false);
            }
        }
        Skip();
    } ;
fragment
ENDIF_TOKEN:
    '#'   TS*   'endif'
    {
        if (Processing.Count > 0)
            Processing.Pop();
        Skip();
    } ;
    
    
    
    
fragment
PP_EXPRESSION:
    PP_OR_EXPRESSION;
fragment
PP_OR_EXPRESSION:
    PP_AND_EXPRESSION   TS*   ('||'   TS*   PP_AND_EXPRESSION   TS* )* ;
fragment
PP_AND_EXPRESSION:
    PP_EQUALITY_EXPRESSION   TS*   ('&&'   TS*   PP_EQUALITY_EXPRESSION   TS* )* ;
fragment
PP_EQUALITY_EXPRESSION:
    PP_UNARY_EXPRESSION   TS*   (('=='| ne = '!=')   TS*   PP_UNARY_EXPRESSION
        { 
            bool rt1 = Returns.Pop(), rt2 = Returns.Pop();
            Returns.Push(rt1 == rt2 == ($ne == null));
        }
        TS* )*
    ;
fragment
PP_UNARY_EXPRESSION:
    pe = PP_PRIMARY_EXPRESSION
    | '!'   TS*   ue = PP_UNARY_EXPRESSION  { Returns.Push(!Returns.Pop()); } 
    ;
fragment
PP_PRIMARY_EXPRESSION:
    IDENTIFIER    
    { 
        Returns.Push(MacroDefines.ContainsKey($IDENTIFIER.Text));
    }
    | '('   PP_EXPRESSION   ')'
    ;


    
fragment
IdentifierStart
    :    '@' | '_' | 'A'..'Z' | 'a'..'z' ;
fragment
IdentifierPart
: 'A'..'Z' | 'a'..'z' | '0'..'9' | '_' ;
fragment
StringEscapeSequence 
   :   '\\' ANYCHAR ; 
fragment
EscapeSequence 
   :   '\\' (
                'b' 
            |   't' 
            |   'n' 
            |   'f' 
            |   'r'
            |   'v'
            |   'a'
            |   '\"' 
            |   '\'' 
            |   '\\'
            |   ('0'..'3') ('0'..'7') ('0'..'7')
            |   ('0'..'7') ('0'..'7') 
            |   ('0'..'7')
            |   'x'   HEX_DIGIT
            |   'x'   HEX_DIGIT   HEX_DIGIT
            |   'x'   HEX_DIGIT   HEX_DIGIT  HEX_DIGIT
            |   'x'   HEX_DIGIT   HEX_DIGIT  HEX_DIGIT  HEX_DIGIT
            |   'u'   HEX_DIGIT   HEX_DIGIT  HEX_DIGIT  HEX_DIGIT
            |   'U'   HEX_DIGIT   HEX_DIGIT  HEX_DIGIT  HEX_DIGIT  HEX_DIGIT  HEX_DIGIT  HEX_DIGIT
            ) ;     
fragment
Decimal_integer_literal:
    Decimal_digits   INTEGER_TYPE_SUFFIX? ;
//--------------------------------------------------------
Hex_number:
    '0'('x'|'X')   HEX_DIGITS   INTEGER_TYPE_SUFFIX? ;
fragment
Decimal_digits:
    DECIMAL_DIGIT+ ;
fragment
DECIMAL_DIGIT:
    '0'..'9' ;
fragment
INTEGER_TYPE_SUFFIX:
    'U' | 'u' | 'L' | 'l' | 'UL' | 'Ul' | 'uL' | 'ul' | 'LU' | 'Lu' | 'lU' | 'lu' ;
fragment HEX_DIGITS:
    HEX_DIGIT+ ;
fragment HEX_DIGIT:
    '0'..'9'|'A'..'F'|'a'..'f' ;
fragment
Exponent_part:
    ('e'|'E')   Sign?   Decimal_digits;
fragment
Sign:
    '+'|'-' ;
fragment
Real_type_suffix:
    'F' | 'f' | 'D' | 'd' | 'M' | 'm' ;    

ANYCHAR : .; 
    
// Testing rules - so you can just use one file with a list of items
public assignment_list:
    (assignment ';')+ ;
public field_declarations:
    (attributes?   modifiers?   type   field_declaration)+ ;
public property_declaration_list:
    (attributes?   modifiers?   type   property_declaration)+ ;
public constant_declarations:
    constant_declaration+;
public literals:
    literal+ ;
public delegate_declaration_list:
    (attributes?   modifiers?   delegate_declaration)+ ;
public local_variable_declaration_list:
    (local_variable_declaration ';')+ ;
public local_variable_initializer_list:
    (local_variable_initializer ';')+ ;
public expression_list_test:
    (expression ';')+ ;
public unary_expression_list:
    (unary_expression ';')+ ;
public invocation_expression_list:
    (invocation_expression ';')+ ;
public primary_expression_list:
    (primary_expression ';')+ ;
public non_assignment_expression_list:
    (non_assignment_expression ';')+ ;
public method_declarations:
    (modifiers? ('void' | type) method_declaration)+ ;    